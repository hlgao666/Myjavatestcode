类加载过程：（类仅仅被加载和初始化1次）
1.加载；
2.链接；
3.初始化
--初始化阶段是执行类构造器<Clinit>()方法的过程，编译器自动收集类中所有类变量的赋值动作和静态(static)语句块的合并产生的
--先初始化父类，再初始化子类。
--jvm会保证类构造器<Clinit>()方法在多线程环境下被正确加锁和同步。

类的主动引用：
-new一个类的对象
-引用类的静态属性（除常量）和方法
-使用反射API进行反射调用类的静态属性（除常量）和方法
-初始化子类对象时，如果父类未被初始化，则先初始化父类
-当jvm启动java Hello,会先初始化Hello类，即先初始化main()方法所在的类

类的被动引用：
-引用常量不会触发类的初始化（常量在编译阶段就已经存入常量池中了）
-通过数组定义类引用，不会触发类的初始化
-当访问一个静态属性时，只有真正声明这个属性的类才会被初始化(e.g. B extends A, 通过B访问A的属性时，只有A会被初始化)

类加载器的分类：
子类----------自定义类加载器--->应用程序类加载器--->扩展类加载器--->引导类加载器------------父类

类加载器的代理模式：交给其他加载器来加载指定的类，一层一层向上传递，先由父类加载器试加载，再往下传递（tomcat服务器加载顺序相反，子类加载器优先调用）
双亲委托机制
使用双亲委托机制，保证了java核心库的安全，不会定义出java.lang.Object这样的类

只有同一个类被同一加载器加载，JVM才认为是同一个类
